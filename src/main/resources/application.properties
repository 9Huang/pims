# https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/


# ==================================> 核心配置 <==================================
# 服务名称
spring.application.name=pims


# 文件中配置dev，测试环境、生产环境通过main方法--spring.profiles.active参数注入
#spring.profiles.active=dev

# 日志
#root日志以WARN级别输出
#logging.level.root=WARN
#springframework.web日志以DEBUG级别输出
#logging.level.org.springframework.web=DEBUG
#hibernate日志以ERROR级别输出
#logging.level.org.hibernate=ERROR
# 日志配置文件的存放地址
logging.config=classpath:config/log/logback-spring.xml

# 用于支持彩色控制台日志
spring.output.ansi.enabled=always

# ==================================> 缓存 <==================================
spring.cache.type=ehcache
# ehcache
spring.cache.ehcache.config=classpath:config/cache/ehcache.xml


# ==================================> 邮件 <==================================
#spring.mail.host=smtp.qq.com
#spring.mail.username=345849402@qq.com
#授权码g，在QQ邮箱客户端生成 修改成自己的  设置-账户-开启服务-获取授权码
#spring.mail.password=XXXXXXX
#spring.mail.properties.mail.smtp.auth=true
#spring.mail.properties.mail.smtp.starttls.enable=true
#spring.mail.properties.mail.smtp.starttls.required=true


#spring.mail.jndi-name= # Session JNDI name. When set, takes precedence over other Session settings.
#spring.mail.host= # SMTP server host. For instance, `smtp.example.com`.
#spring.mail.port= # SMTP server port.
#spring.mail.username= # Login user of the SMTP server.
#spring.mail.password= # Login password of the SMTP server.
#spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.
#spring.mail.properties.*= # Additional JavaMail Session properties.
#spring.mail.protocol=smtp # Protocol used by the SMTP server.
#spring.mail.test-connection=false # Whether to test that the mail server is available on startup.


# ==================================> JSON配置 <==================================


# ==================================> 数据配置 <==================================
# 数据源连接池的全限定名
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# JDBC驱动的全限定名
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# JDBC URL
spring.datasource.url=jdbc:mysql://localhost:3306/pims?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai
# 数据库的登录账号
spring.datasource.username=root
# 数据库的登录密码
spring.datasource.password=1024

# 初始化数据源：建表sql文件的存放位置
#spring.datasource.schema=# Schema (DDL) script resource references.
# 执行DDL脚本所需的数据库用户名
#spring.datasource.schema-username=
# 执行DDL脚本所需的数据库密码
#spring.datasource.schema-password=
# 初始化数据源：存储表数据的sql文件存放位置
#spring.datasource.data=
# 执行DML脚本所需的数据库用户名
#spring.datasource.data-username=
# 执行DML脚本所需的数据库密码
#spring.datasource.data-password=
# 初始化数据源时，遇到错误时是否停止，默认false
#spring.datasource.continue-on-error=false
# SQL初始化脚本中的语句分隔符
#spring.datasource.separator=
# SQL脚本编码
#spring.datasource.sql-script-encoding=
# Initialize the datasource with available DDL and DML scripts.
# 可选值有always、embedded、never
#spring.datasource.initialization-mode=
# Platform to use in the DDL or DML scripts.
# 执行DDL或DML脚本的平台.
# 例如 schema-${platform}.sql 或 data-${platform}.sql
#spring.datasource.platform=

# redis
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
#spring.redis.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
#spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
#spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=200ms


# JPA
# 是否启用JPA，默认启用（true）
spring.data.jpa.repositories.enabledd=true
# 目标数据库类型
spring.jpa.database=mysql
# 是否将OpenEntityManagerInViewInterceptor注册到spring容器中，为每一个请求线程绑定一个JPA的EntityManager对象。
spring.jpa.open-in-view=false
# 启动服务时是否初始化schema，默认否
spring.jpa.generate-ddl=false
# 控制台输出sql
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# ==================================> 事务配置 <==================================

# ==================================> 数据迁移配置 <==================================


# ==================================> 集成配置 <==================================

# ==================================> WEB配置 <==================================
# 是否启用http编码支持
spring.http.encoding.enabled=true
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
spring.http.encoding.charset=UTF-8

#开启Multipart解析器
spring.servlet.multipart.enabled=true
#上传文件所存放的临时目录
spring.servlet.multipart.location=D:/temp/uploads/
#文件的最大大小，单位为字节
spring.servlet.multipart.max-file-size=5242880
#请求的最大大小，单位为字节
spring.servlet.multipart.max-request-size=10485760
#文件大小阈值，当大于这个阈值时将写入到磁盘，否则在内存中。默认值为0
spring.servlet.multipart.file-size-threshold=0
# Whether to resolve the multipart request lazily at the time of file or parameter access.
spring.servlet.multipart.resolve-lazily=false

#spring.mvc.view.prefix=/WEB-INF/
#spring.mvc.view.suffix=.jsp
#spring.mvc.static-path-pattern=/static/**

# ==================================> 模板 <==================================
# 集成thymeleaf
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
# 模板模式，取值见org.thymeleaf.templatemode.TemplateMode
#spring.thymeleaf.mode=HTML
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.servlet.content-type=text/html
# 是否缓存模板 默认缓存(true)
spring.thymeleaf.cache=false
# 渲染视图之前，是否先检查模板是否存在。默认检查
#spring.thymeleaf.check-template=true


# 集成freemarker
#spring.freemarker.template-loader-path=classpath:/static/template/
#spring.freemarker.enabled=true
#spring.freemarker.cache=false
#spring.freemarker.charset=UTF-8
#spring.freemarker.content-type=text/html
#spring.freemarker.allow-request-override=false
#spring.freemarker.check-template-location=true
#spring.freemarker.expose-request-attributes=false
#spring.freemarker.expose-session-attributes=false
#spring.freemarker.expose-spring-macro-helpers=false

# ==================================> 服务器配置 <==================================
# 服务端口号
server.port=9424
server.tomcat.uri-encoding=UTF-8
server.servlet.context-path=/pims

# ==================================> 服务安全配置 <==================================
#spring-session 使用
spring.session.store-type=none

# ==================================> RSocket配置 <==================================
# Network address to which the server should bind.
#spring.rsocket.server.address=
# Path under which RSocket handles requests (only works with websocket transport).
#spring.rsocket.server.mapping-path=
# RSocket端口号
#spring.rsocket.server.port=
# RSocket传输协议
#spring.rsocket.server.transport=
# ==================================> 服务监控Actuator配置 <==================================

# 启用所有的监控端点，默认情况下，这些端点都是禁用的。
management.endpoints.web.exposure.include=*
# 禁用/shutdown端点
management.endpoint.shutdown.enabled=false
# 禁用/configprops端点
management.endpoint.configprops.enabled=false
# 执行器端点的基本路径，默认是是 /actuator
#management.endpoints.web.base-path=/actuator
management.endpoint.health.show-details=always

# ==================================> 热部署配置 <==================================
# 热部署生效
spring.devtools.restart.enabled=true
# 设置重启的目录,添加那个目录的文件需要restart
#spring.devtools.restart.additional-paths=src/main/java
#spring.devtools.restart.exclude=WEB-INF/**

# ==================================> 测试配置 <==================================


# mybatis
# mybatis model文件存放位置
mybatis.type-aliases-package=com.huang.pims.**.model
# mybatis映射文件存放位置
mybatis.mapper-locations=classpath:com/huang/pims/**/mapper/*.xml
# 控制台输出执行的SQL
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
#mybatis.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl
# 开启mybatis驼峰映射
mybatis.configuration.map-underscore-to-camel-case=true

# mybatis配置文件存放位置
# mybatis.config-location=classpath:mapper/config/mybatis-config.xml
# 类型转换处理器存放位置
# mybatis.type-handlers-package=

# mybatis分页
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql



log.level.active=INFO
# 以下配置根据系统自定义配置，以下可通过apollo注入
# 日志中打印的应用名
log.application.name=pims
# 生产环境日志级别
log.pro.level=INFO
# 开发环境日志级别
log.dev.level=INFO
# 日志文件名
log.file.name=pims
# 日志文件最大归档数
log.file.maxIndex=20
# 单个日志文件最大归档大小
log.file.maxFileSize=50MB
# 日志文件保留天数
log.file.maxHistory=30

# 服务主机名
#eureka.instance.hostname=pims
# 表示是否注册自身到eureka服务器
#eureka.client.register-with-eureka=true
# 是否从eureka服务器上获取注册信息
#eureka.client.fetch-registry=true
# 服务注册地址，即eureka服务器端访问地址
#eureka.client.service-url.defaultZone=http://eureka-server:8888/eureka/

spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8